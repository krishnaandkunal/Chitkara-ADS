class MedianFinder {

    PriorityQueue<Integer> maxhp = new PriorityQueue<>(Collections.reverseOrder());
    PriorityQueue<Integer> minhp = new PriorityQueue<>();
    
    public MedianFinder() {
        
    }
    
    public void addNum(int num) {
        if(maxhp.size() == 0 || num < maxhp.peek())
        {
            maxhp.add(num);
        }
        else
        {
            minhp.add(num);
        }
        
        if(maxhp.size() - minhp.size() >= 2)
        {
            minhp.add(maxhp.remove());
        }
        if(minhp.size() > maxhp.size())
        {
            maxhp.add(minhp.remove());
        }
        
        
    }
    
    public double findMedian() {
        
        if(maxhp.size() == minhp.size())
        {
            return (maxhp.peek()+minhp.peek())/2.0;
        }
        else
        {
            return maxhp.peek();
        }
        
       
    }
}