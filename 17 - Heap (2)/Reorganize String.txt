class Solution {
    public String reorganizeString(String s) {
		
        HashMap<Character,Integer> map = new HashMap<>();
        for(int i = 0; i < s.length(); i++)
        {
            map.put(s.charAt(i),map.getOrDefault(s.charAt(i),0)+1);
        }
        
        PriorityQueue<Character> pq = new PriorityQueue<>(new Comparator<Character>(){
            
            @Override
            public int compare(Character c1, Character c2)
            {
                return map.get(c2)-map.get(c1);
            }
            
        });
        
        pq.addAll(map.keySet());
        
        StringBuilder sb = new StringBuilder();
        while(pq.size() > 1)
        {
            char a = pq.remove();
            char b = pq.remove();
            
            sb.append(a);
            sb.append(b);
            
            map.put(a,map.get(a)-1);
            map.put(b,map.get(b)-1);
            
            if(map.get(a) != 0)
            {
                pq.add(a);
            }
            if(map.get(b) != 0)
            {
                pq.add(b);
            }
            
        }
        
        if(pq.size() == 1)
        {
            char a = pq.remove();
            if(map.get(a) > 1)
            {
                return "";
            }
            else
            {
                sb.append(a);
            }
        }
        
        return sb.toString();
        
        
    }
}